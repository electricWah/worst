#!/usr/bin/env ./rworst

; (lambda (s) (eprintf "~a\n" s) s)
; racket-builtin quote interpreter-dump-stack definition-add

; shorthand for quote quote uplevel
[ quote quote quote uplevel uplevel ] quote upquote definition-add

; a little cheat for some more options with define
[] quote %before-define definition-add
[ ; define name [def...]
    upquote upquote ; name [def ...]
    %before-define
    swap quote definition-add uplevel
] quote define definition-add

; Racket builtin definer
; racket-builtin name (lambda (c s) ... (values c s))
define define-racket-builtin [
    upquote upquote racket-builtin
    swap quote definition-add uplevel
]

define-racket-builtin string-append
    (lambda (c s)
      (let ([a (stack-top s string?)]
            [b (stack-top (cdr s) string?)])
      (values c (cons (string-append b a) (cddr s)))))

define-racket-builtin ->string
    (lambda (c s) (values c (cons (~a (stack-top s)) (cdr s))))

define-racket-builtin env-get
    (lambda (c s) (values c (cons (getenv (stack-top s string?)) s)))

; define current-error-handler [ 1 interpreter-exit ]

; value const name
define const [
    [quote] swap list-push list-reverse
    upquote
    quote definition-add uplevel
]

; bool if [if-true] [if-false]
define if [
    upquote upquote
    ; cond true false => false true cond
    swap dig
    quote swap when drop
    eval
]

; path read-file -> list
define read-file [
    open-input-file
    define read-all [
        ; tail-call
        swap
        port-read-value eof-object? if [
            drop drop list-reverse
        ] [
            dig swap list-push
            read-all
        ]
    ]
    [] read-all
]

"WORST_LIBDIR" env-get swap drop
"./lib" swap or bury drop drop
const WORST_LIBDIR

; module-name resolve-import-path
; uses WORST_LIBDIR
define resolve-import-path [
    symbol? if [
        ->string
        WORST_LIBDIR "/" string-append
        swap string-append
        ".w" string-append
    ] [ ]
]

; Very basic import/export
define import [
    upquote resolve-import-path
    read-file quote eval uplevel
]
define export [
    upquote
    definition-resolve
    swap
    quote definition-add quote uplevel uplevel
]

; rworst-specific stuff
import rworst
; Generally useful utilities
import worst/base
; Real import/export
import worst/module

quote export definition-remove

; Interactive
import ui

worst-repl
"\n" print

; vi: ft=scheme

