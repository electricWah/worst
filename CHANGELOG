
# 0.5

- Add features-enabled and feature-enabled? to query features from Cargo.toml
- Add string-split
- Add list-merge-sort-lt [lt-comparator]
- Rename open-embedded-file/read to embedded-file-open (it'll always be read!)
- Add embedded-file-port-read-range, embedded-file-port? and port->string
- Add compare for i64/f64/string and redefine lt/le/gt/ge in terms of it
- Add list-set-differsection for set difference and intersection
- Add list-find-first-index to find a position in a list, given a predicate.

# 0.4 (2022-11-19)

In which the innards are simplified somewhat,
and some basic I/O facilities are introduced.

- Types no longer exist as a Worst-level concept
- No more ImplValue or `impl_value!`, use `impl Value for YourType {}` instead
- Equality and value->string are now dispatch definitions, not meta values
- Val is no longer PartialEq or Debug (a consequence of removing types)
- More builtins consume their arguments: list-length, place-get
- Rename get-environment-variable -> environment-variable, now consumes
- Add list-iter builtin
- Remove separate dynamic scope
- Make dynamic attribute use locals instead of dynamic scope
- Add recursive attribute to enable recursive definitions
- Start on a Bytevector type (Vec<u8>) for operations on bytes
- Add thin wrappers around Rust's APIs for OS subprocesses and opening files
- const is now defined in terms of value->constant
- Add local-definitions, which is like all-definitions but only lists locals
- Add value-definition-add for building up a closure environment for eval
- Add value-inherit-all-definitions and value-inherit-local-definitions for speed
- definition-resolve now consumes its argument
- Division by 0 returns `false` with `error?`
- Add list-get, move list-iter into worst/prelude
- Remove list-iterate-pairs and pairs-iterate(??), add pairs-iter and pairs-keys
- Remove ->string, use value->string instead
- Displaying builtins shows their name, also added builtin? and builtin-name
- Change arg order of interpreter-definition-add: now it's interp key value
- equals?, lt? and other comparators understand parens now: 6 lt? (4 5 add)
- Add value-set-error and value-unset-error to set error? on a value
- Add a whole bunch of filesystem and some file path builtins

# 0.3 (2022-09-25)

- Lexical scope is the true default now
- Dynamic values:
- - Add a separate dynamic scope namespace for dynamic values
- - Add dynamic-set and dynamic-resolve builtins
- - Add define (dynamic) for dynamic definitions
- - Add a definition-attributes dynamic value
      (true in the attributes clause of a define form)
- standard-worst-prompt is dynamic
- Add call-stack-dump to show debug information
- Simplify doc builtins: value-doc, value-doc-set; doc is now in worst
- Fix a bug where uplevel-ing through an empty stack frame
    would ignore its paused children
- Add ', clone2, and equal
- Remove call (eval calls symbols now)
- Start a changelog

