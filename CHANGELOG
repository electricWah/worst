
# 0.5

In which the innards are simplified even more.

- Add features-enabled and feature-enabled? to query features from Cargo.toml
- Add string-split
- Add list-merge-sort-lt [lt-comparator]
- Rename open-embedded-file/read to embedded-file-open (it'll always be read!)
- Add embedded-file-port-read-range, embedded-file-port? and port->string
- Add compare for any PartialOrd and redefine lt/le/gt/ge in terms of it
- Add list-set-differsection for set difference and intersection
- Add list-find-first-index to find a position in a list, given a predicate
- Add list-deduplicate-sequential
- Rename interpreter-call to interpreter-eval-next (mirroring eval now, see 0.3)
- Redo the entire interpreter (lol) (no more generators)
- Replace stack-matches? with and2? (2 items is the most common case)
- Add with-dynamics for mutually recursive definitions or recursive + dispatch
- Rewrite reader: reader-read-string, reader-complete
- Add value-type-id for types of things in worst
- Add i64map: an ordered lookup with i64 keys
- Add a bunch of <type>-hash builtins for hashing things into i64
- Add unique values: they only compare equal to themselves and their copies
- Add value-meta-entry and value-set-meta-entry for accessing meta values
  - Keys are unique values
  - Values added as meta entries to other values lose their meta values
- Add type-dispatch attribute for single-value dispatch based on type predicates
  - It's much faster with lots of cases, at the expense of flexibility
  - It still works with a pre-defined default case as with [dispatch]
- Add worst/util/doc-check module to check documentation
- Add code-next and code-peek to quote without raising an error
- Replace type predicates with type-id constants and is-type
  - e.g. [string?] is now [<string> is-type]
- Add hashmaps finally: make-hashmap, hashmap-insert, hashmap-get, value-hash
- Add module-import, module caching, and current-module
  - current-module is false in repl and scripts, or a hashmap when in a module
- Add ui/cli: [cli-run [...]] runs if the module name is the first cli argument
- Add [import "relative-file.w"] for scripts (not modules (yet?))
- Replace WORST_LIBPATH with module-search-path and module-search-path-prepend
- Add worst/package with [package {options...}] for collections of modules
  - options: [path "relative-dir"] to add to module-search-path
- Add current-frame-meta-entry to read meta entries from the current definition
    (they are the same meta entries on the value of the definition)
- Add [uplevel-while [ ... -> bool continue ]] to walk up the call stack
- Add [with-uplevel name] attribute to uplevel out of the definition anywhere
- Remove dynamic-resolve-any and dynamic-resolve-local
- Make [uplevel] tail call if it's the last thing in a stack frame
    - Remove [eval-while] in favour of [while] using this property
- Remove value-set-error and value-unset-error, add <is-error> type for meta
- Replace defenv with separate ambient and local defset
- Consolidate *-equal, *-compare builtins into value-equal and value-compare
- Add value-hash, value->string-debug and value->string-display for most types
- Consolidate port builtins into port-read-*, port-write-* etc

# 0.4 (2022-11-19)

In which the innards are simplified somewhat,
and some basic I/O facilities are introduced.

- Types no longer exist as a Worst-level concept
- No more ImplValue or `impl_value!`, use `impl Value for YourType {}` instead
- Equality and value->string are now dispatch definitions, not meta values
- Val is no longer PartialEq or Debug (a consequence of removing types)
- More builtins consume their arguments: list-length, place-get
- Rename get-environment-variable -> environment-variable, now consumes
- Add list-iter builtin
- Remove separate dynamic scope
- Make dynamic attribute use locals instead of dynamic scope
- Add recursive attribute to enable recursive definitions
- Start on a Bytevector type (Vec<u8>) for operations on bytes
- Add thin wrappers around Rust's APIs for OS subprocesses and opening files
- const is now defined in terms of value->constant
- Add local-definitions, which is like all-definitions but only lists locals
- Add value-definition-add for building up a closure environment for eval
- Add value-inherit-all-definitions and value-inherit-local-definitions for speed
- definition-resolve now consumes its argument
- Division by 0 returns `false` with `error?`
- Add list-get, move list-iter into worst/prelude
- Remove list-iterate-pairs and pairs-iterate(??), add pairs-iter and pairs-keys
- Remove ->string, use value->string instead
- Displaying builtins shows their name, also added builtin? and builtin-name
- Change arg order of interpreter-definition-add: now it's interp key value
- equals?, lt? and other comparators understand parens now: 6 lt? (4 5 add)
- Add value-set-error and value-unset-error to set error? on a value
- Add a whole bunch of filesystem and some file path builtins

# 0.3 (2022-09-25)

- Lexical scope is the true default now
- Dynamic values:
- - Add a separate dynamic scope namespace for dynamic values
- - Add dynamic-set and dynamic-resolve builtins
- - Add define (dynamic) for dynamic definitions
- - Add a definition-attributes dynamic value
      (true in the attributes clause of a define form)
- standard-worst-prompt is dynamic
- Add call-stack-dump to show debug information
- Simplify doc builtins: value-doc, value-doc-set; doc is now in worst
- Fix a bug where uplevel-ing through an empty stack frame
    would ignore its paused children
- Add ', clone2, and equal
- Remove call (eval calls symbols now)
- Start a changelog

